name: 🔒 Security & Dependency Monitoring

on:
  schedule:
    # Run weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  push:
    paths:
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/security.yml'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Security audit
  security-audit:
    name: 🔍 Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Run npm audit
      id: audit
      run: |
        echo "## 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY
        
        # Run audit and capture output
        if npm audit --audit-level=moderate --json > audit-results.json; then
          echo "✅ No security vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
          echo "status=clean" >> $GITHUB_OUTPUT
        else
          echo "⚠️ Security vulnerabilities detected:" >> $GITHUB_STEP_SUMMARY
          echo "status=vulnerabilities" >> $GITHUB_OUTPUT
          
          # Parse and display vulnerabilities
          if [ -f "audit-results.json" ]; then
            HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' audit-results.json)
            MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' audit-results.json)
            LOW=$(jq -r '.metadata.vulnerabilities.low // 0' audit-results.json)
            
            echo "- 🔴 High: $HIGH" >> $GITHUB_STEP_SUMMARY
            echo "- 🟡 Moderate: $MODERATE" >> $GITHUB_STEP_SUMMARY
            echo "- 🟢 Low: $LOW" >> $GITHUB_STEP_SUMMARY
            
            echo "high=$HIGH" >> $GITHUB_OUTPUT
            echo "moderate=$MODERATE" >> $GITHUB_OUTPUT
            echo "low=$LOW" >> $GITHUB_OUTPUT
          fi
        fi
        
    - name: 📊 Upload Audit Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-results
        path: audit-results.json
        retention-days: 30
        
    - name: 🚨 Create Security Issue
      if: steps.audit.outputs.status == 'vulnerabilities' && (steps.audit.outputs.high != '0' || steps.audit.outputs.moderate != '0')
      uses: actions/github-script@v7
      with:
        script: |
          const high = '${{ steps.audit.outputs.high }}';
          const moderate = '${{ steps.audit.outputs.moderate }}';
          const low = '${{ steps.audit.outputs.low }}';
          
          const title = `🔒 Security Alert: ${high} High, ${moderate} Moderate Vulnerabilities`;
          const body = `## 🚨 Security Vulnerabilities Detected
          
          **Scan Date**: ${new Date().toISOString().split('T')[0]}
          **Scanner**: npm audit
          
          ### 📊 Vulnerability Summary
          - 🔴 **High**: ${high}
          - 🟡 **Moderate**: ${moderate}  
          - 🟢 **Low**: ${low}
          
          ### 🛠️ Recommended Actions
          1. Run \`npm audit fix\` to automatically fix vulnerabilities
          2. Review each vulnerability manually for breaking changes
          3. Update dependencies to latest secure versions
          4. Re-run security scan to verify fixes
          5. Run full test suite (\`npm test\`) after updates
          
          ### 🔍 Investigation Steps
          \`\`\`bash
          # Check vulnerabilities in detail
          npm audit
          
          # Attempt automatic fixes
          npm audit fix
          
          # Manual dependency updates
          npm update
          
          # Verify fixes
          npm audit
          npm test
          \`\`\`
          
          ### 🎯 Quiz System Specific Concerns
          - Ensure Quill.js rich text editor is not affected
          - Verify Playwright testing framework security
          - Check for any impact on mathematical formula rendering
          - Validate offline functionality remains intact
          
          **Auto-generated by security monitoring** 🤖`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'dependencies', 'automated-issue', 'high-priority']
          });

  # Job 2: Dependency freshness check
  dependency-check:
    name: 📦 Dependency Freshness
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Check for outdated packages
      id: outdated
      run: |
        echo "## 📦 Dependency Status" >> $GITHUB_STEP_SUMMARY
        
        # Check for outdated packages
        if npm outdated --json > outdated.json 2>/dev/null; then
          echo "✅ All dependencies are up to date!" >> $GITHUB_STEP_SUMMARY
          echo "status=up-to-date" >> $GITHUB_OUTPUT
        else
          # Parse outdated packages
          if [ -f "outdated.json" ] && [ -s "outdated.json" ]; then
            echo "📋 Outdated packages found:" >> $GITHUB_STEP_SUMMARY
            echo "status=outdated" >> $GITHUB_OUTPUT
            
            # Create readable summary
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            npm outdated || true
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            
            # Count outdated packages
            OUTDATED_COUNT=$(jq 'length' outdated.json 2>/dev/null || echo "0")
            echo "outdated-count=$OUTDATED_COUNT" >> $GITHUB_OUTPUT
          else
            echo "✅ All dependencies are up to date!" >> $GITHUB_STEP_SUMMARY
            echo "status=up-to-date" >> $GITHUB_OUTPUT
          fi
        fi
        
    - name: 📊 Upload Dependency Check Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-results
        path: outdated.json
        retention-days: 7

  # Job 3: License compliance check
  license-check:
    name: ⚖️ License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: ⚖️ Check licenses
      run: |
        echo "## ⚖️ License Compliance Check" >> $GITHUB_STEP_SUMMARY
        
        # Install license checker if not present
        npm install -g license-checker
        
        # Generate license report
        license-checker --json > licenses.json
        
        # Check for problematic licenses
        PROBLEMATIC_LICENSES="GPL-2.0,GPL-3.0,AGPL-1.0,AGPL-3.0,LGPL-2.0,LGPL-2.1,LGPL-3.0,CPAL-1.0,EPL-1.0,MPL-1.1,MPL-2.0,EUPL-1.1"
        
        if license-checker --excludePrivatePackages --onlyAllow "MIT;BSD;Apache-2.0;ISC;0BSD;CC0-1.0;Unlicense" --summary > license-summary.txt 2>&1; then
          echo "✅ All licenses are compatible!" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ License compliance issues detected:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat license-summary.txt || echo "Could not read license summary"
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 📊 Upload License Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: license-compliance-report
        path: |
          licenses.json
          license-summary.txt
        retention-days: 30

  # Job 4: Code quality scan
  code-quality:
    name: 🎯 Code Quality Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🎯 Run basic code quality checks
      run: |
        echo "## 🎯 Code Quality Analysis" >> $GITHUB_STEP_SUMMARY
        
        # Check for basic code issues
        echo "### 📁 File Structure Analysis" >> $GITHUB_STEP_SUMMARY
        
        # Count test files
        TEST_FILES=$(find tests/ -name "*.spec.js" | wc -l)
        echo "- Test files: $TEST_FILES" >> $GITHUB_STEP_SUMMARY
        
        # Check for TODO/FIXME comments
        TODO_COUNT=$(grep -r "TODO\|FIXME\|HACK\|XXX" src/ tests/ --include="*.js" --include="*.html" --include="*.css" | wc -l || echo "0")
        echo "- TODO/FIXME comments: $TODO_COUNT" >> $GITHUB_STEP_SUMMARY
        
        # Check file sizes
        LARGE_FILES=$(find src/ -name "*.js" -size +100k | wc -l)
        echo "- Large JavaScript files (>100KB): $LARGE_FILES" >> $GITHUB_STEP_SUMMARY
        
        # Check for console.log statements (should be minimal in production)
        CONSOLE_LOGS=$(grep -r "console\.log" src/ --include="*.js" | wc -l || echo "0")
        echo "- Console.log statements: $CONSOLE_LOGS" >> $GITHUB_STEP_SUMMARY
        
        if [ "$TODO_COUNT" -gt 20 ]; then
          echo "⚠️ High number of TODO/FIXME comments detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "$CONSOLE_LOGS" -gt 10 ]; then
          echo "⚠️ High number of console.log statements (consider removing for production)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "✅ Code quality scan completed" >> $GITHUB_STEP_SUMMARY