name: 🎯 Quiz System CI - Complete Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - clean-architecture
        - rich-text
        - mobile
        - specific

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_VERSION: '1.54.2'

jobs:
  # Job 1: Fast feedback with clean architecture tests
  quick-validation:
    name: 🚀 Quick Validation (Clean Architecture)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🎭 Install Playwright browsers
      run: npx playwright install --with-deps chromium
      
    - name: ⚡ Run Clean Architecture Tests (Fast Feedback)
      run: npx playwright test tests/quiz-generator-clean.spec.js --project=chromium --reporter=line
      
    - name: 📊 Upload Quick Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: quick-validation-results
        path: |
          playwright-report/
          test-results/
        retention-days: 7

  # Job 2: Complete test suite across all browsers (runs in parallel)
  comprehensive-testing:
    name: 🧪 Complete Test Suite (${{ matrix.browser }})
    runs-on: ${{ matrix.os }}
    needs: quick-validation
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - browser: chromium
            os: ubuntu-latest
            name: "🔷 Chromium (Linux)"
          - browser: firefox  
            os: ubuntu-latest
            name: "🔥 Firefox (Linux)"
          - browser: webkit
            os: ubuntu-latest
            name: "🍎 WebKit (Linux)"
          - browser: "Mobile Chrome"
            os: ubuntu-latest  
            name: "📱 Mobile Chrome"
          - browser: "Mobile Safari"
            os: ubuntu-latest
            name: "📱 Mobile Safari"
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🎭 Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: 🏃‍♂️ Run Complete Test Suite - ${{ matrix.name }}
      run: |
        echo "🎯 Running ${{ matrix.name }} tests..."
        npx playwright test --project="${{ matrix.browser }}" --reporter=line,json:test-results-${{ matrix.browser }}.json
        
    - name: 📊 Test Results Summary
      if: always()
      run: |
        echo "## 🎯 ${{ matrix.name }} Test Results" >> $GITHUB_STEP_SUMMARY
        if [ -f "test-results-${{ matrix.browser }}.json" ]; then
          PASSED=$(jq -r '.stats.expected' test-results-${{ matrix.browser }}.json 2>/dev/null || echo "0")
          FAILED=$(jq -r '.stats.unexpected' test-results-${{ matrix.browser }}.json 2>/dev/null || echo "0")
          TOTAL=$((PASSED + FAILED))
          echo "- ✅ **Passed**: $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ **Failed**: $FAILED" >> $GITHUB_STEP_SUMMARY  
          echo "- 📊 **Total**: $TOTAL" >> $GITHUB_STEP_SUMMARY
          if [ "$FAILED" -eq "0" ]; then
            echo "- 🎉 **Status**: ALL TESTS PASSING! 🎉" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🚨 **Status**: Some tests failed" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- ⚠️ No test results file found" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
    - name: 📁 Upload Test Results & Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.browser }}
        path: |
          playwright-report/
          test-results/
          test-results-${{ matrix.browser }}.json
        retention-days: 30

  # Job 3: Rich Text Integration Tests (focused on mathematical formulas)
  rich-text-validation:
    name: 🧮 Rich Text & Formula Validation
    runs-on: ubuntu-latest
    needs: quick-validation
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🎭 Install Playwright browsers
      run: npx playwright install --with-deps chromium firefox webkit
      
    - name: 🧮 Test Mathematical Formulas (H₂O, E=mc²)
      run: |
        echo "🧪 Testing Rich Text Integration..."
        npx playwright test tests/quiz-generator.spec.js --reporter=line
        echo "🔬 Testing Quiz Test Runner with Rich Text..."
        npx playwright test tests/quiz-test-runner.spec.js --reporter=line
        
    - name: 📊 Upload Rich Text Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: rich-text-validation-results
        path: |
          playwright-report/
          test-results/
        retention-days: 14

  # Job 4: Mobile & Responsive Testing
  mobile-testing:
    name: 📱 Mobile & Responsive Testing
    runs-on: ubuntu-latest
    needs: quick-validation
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🎭 Install Playwright browsers
      run: npx playwright install --with-deps chromium webkit
      
    - name: 📱 Run Mobile Responsiveness Tests
      run: |
        echo "📱 Testing Mobile Responsiveness..."
        npx playwright test tests/mobile-responsiveness.spec.js --reporter=line
        echo "🔄 Testing Question Reordering..."
        npx playwright test tests/question-reordering.spec.js --reporter=line
        
    - name: 📊 Upload Mobile Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: mobile-testing-results
        path: |
          playwright-report/
          test-results/
        retention-days: 14

  # Job 5: Final Results & Quality Gate
  test-summary:
    name: 🎯 Test Summary & Quality Gate
    runs-on: ubuntu-latest
    needs: [quick-validation, comprehensive-testing, rich-text-validation, mobile-testing]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: 📥 Download all test artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-test-results
        
    - name: 📊 Generate Comprehensive Test Summary
      run: |
        echo "# 🎯 Quiz System CI - Complete Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Test Suite Overview" >> $GITHUB_STEP_SUMMARY
        echo "- 🧮 **Rich Text Features**: Mathematical formulas (H₂O, E=mc²)" >> $GITHUB_STEP_SUMMARY
        echo "- 🏗️ **Architecture**: UI Mapping with Page Object Model" >> $GITHUB_STEP_SUMMARY
        echo "- 🌐 **Cross-Browser**: Chromium, Firefox, WebKit" >> $GITHUB_STEP_SUMMARY
        echo "- 📱 **Mobile**: Android & iOS simulation" >> $GITHUB_STEP_SUMMARY
        echo "- 🎯 **Target**: 210/210 tests passing (TRUE 100%)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🚦 Quality Gate Status" >> $GITHUB_STEP_SUMMARY
        
        # Check if any jobs failed
        if [ "${{ needs.quick-validation.result }}" = "failure" ]; then
          echo "- ❌ Quick Validation: FAILED" >> $GITHUB_STEP_SUMMARY
          QUALITY_GATE="FAILED"
        else
          echo "- ✅ Quick Validation: PASSED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.comprehensive-testing.result }}" = "failure" ]; then
          echo "- ❌ Comprehensive Testing: FAILED" >> $GITHUB_STEP_SUMMARY
          QUALITY_GATE="FAILED"
        else
          echo "- ✅ Comprehensive Testing: PASSED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.rich-text-validation.result }}" = "failure" ]; then
          echo "- ❌ Rich Text Validation: FAILED" >> $GITHUB_STEP_SUMMARY
          QUALITY_GATE="FAILED"
        else
          echo "- ✅ Rich Text Validation: PASSED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.mobile-testing.result }}" = "failure" ]; then
          echo "- ❌ Mobile Testing: FAILED" >> $GITHUB_STEP_SUMMARY
          QUALITY_GATE="FAILED"
        else
          echo "- ✅ Mobile Testing: PASSED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${QUALITY_GATE:-PASSED}" = "FAILED" ]; then
          echo "## 🚨 QUALITY GATE: FAILED" >> $GITHUB_STEP_SUMMARY
          echo "Some tests failed. Please review the test results before merging." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "## 🎉 QUALITY GATE: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "All test suites passed! Ready for merge. 🚀" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 📝 Create Issue on Test Failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = `🚨 CI Test Failure - ${context.payload.head_commit?.message || 'Unknown commit'}`;
          const body = `## 🚨 Automated Test Failure Report
          
          **Commit**: ${context.sha}
          **Branch**: ${context.ref}
          **Workflow**: ${context.workflow}
          **Run ID**: ${context.runId}
          
          ### 📊 Failed Jobs:
          - Quick Validation: ${{ needs.quick-validation.result }}
          - Comprehensive Testing: ${{ needs.comprehensive-testing.result }}
          - Rich Text Validation: ${{ needs.rich-text-validation.result }}
          - Mobile Testing: ${{ needs.mobile-testing.result }}
          
          ### 🔍 Investigation Steps:
          1. Check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})
          2. Download test artifacts for detailed analysis
          3. Review test results for specific failures
          4. Check if rich text formulas (H₂O, E=mc²) are working correctly
          5. Verify cross-browser compatibility
          
          ### 🎯 Expected: 210/210 tests passing
          
          **Auto-generated by GitHub Actions** 🤖`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'ci-failure', 'automated-issue']
          });